// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FilterSelector component Options is empty renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FilterSelector
    handler={[Function]}
    options={Array []}
    type="place"
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": null,
    },
    "ref": null,
    "rendered": null,
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": null,
      },
      "ref": null,
      "rendered": null,
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`FilterSelector component Options not empty renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FilterSelector
    handler={[Function]}
    options={
        Array [
            "v1",
            "v2",
            "v3",
          ]
    }
    type="place"
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <div
        className="filter-select-wrapper form-group"
>
        <select
                className="form-control"
                onChange={[Function]}
                value=""
        >
                <option
                        value=""
                >
                        Все
                </option>
                <option
                        value="v1"
                >
                        v1
                </option>
                <option
                        value="v2"
                >
                        v2
                </option>
                <option
                        value="v3"
                >
                        v3
                </option>
        </select>
</div>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <select
          className="form-control"
          onChange={[Function]}
          value=""
>
          <option
                    value=""
          >
                    Все
          </option>
          <option
                    value="v1"
          >
                    v1
          </option>
          <option
                    value="v2"
          >
                    v2
          </option>
          <option
                    value="v3"
          >
                    v3
          </option>
</select>,
        "className": "filter-select-wrapper form-group",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <option
              value=""
>
              Все
</option>,
            Array [
              <option
                value="v1"
>
                v1
</option>,
              <option
                value="v2"
>
                v2
</option>,
              <option
                value="v3"
>
                v3
</option>,
            ],
          ],
          "className": "form-control",
          "onChange": [Function],
          "value": "",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Все",
              "value": "",
            },
            "ref": null,
            "rendered": "Все",
            "type": "option",
          },
          Object {
            "instance": null,
            "key": "v1",
            "nodeType": "host",
            "props": Object {
              "children": "v1",
              "value": "v1",
            },
            "ref": null,
            "rendered": "v1",
            "type": "option",
          },
          Object {
            "instance": null,
            "key": "v2",
            "nodeType": "host",
            "props": Object {
              "children": "v2",
              "value": "v2",
            },
            "ref": null,
            "rendered": "v2",
            "type": "option",
          },
          Object {
            "instance": null,
            "key": "v3",
            "nodeType": "host",
            "props": Object {
              "children": "v3",
              "value": "v3",
            },
            "ref": null,
            "rendered": "v3",
            "type": "option",
          },
        ],
        "type": "select",
      },
      "type": "div",
    },
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <div
          className="filter-select-wrapper form-group"
>
          <select
                    className="form-control"
                    onChange={[Function]}
                    value=""
          >
                    <option
                              value=""
                    >
                              Все
                    </option>
                    <option
                              value="v1"
                    >
                              v1
                    </option>
                    <option
                              value="v2"
                    >
                              v2
                    </option>
                    <option
                              value="v3"
                    >
                              v3
                    </option>
          </select>
</div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <select
            className="form-control"
            onChange={[Function]}
            value=""
>
            <option
                        value=""
            >
                        Все
            </option>
            <option
                        value="v1"
            >
                        v1
            </option>
            <option
                        value="v2"
            >
                        v2
            </option>
            <option
                        value="v3"
            >
                        v3
            </option>
</select>,
          "className": "filter-select-wrapper form-group",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <option
                value=""
>
                Все
</option>,
              Array [
                <option
                  value="v1"
>
                  v1
</option>,
                <option
                  value="v2"
>
                  v2
</option>,
                <option
                  value="v3"
>
                  v3
</option>,
              ],
            ],
            "className": "form-control",
            "onChange": [Function],
            "value": "",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Все",
                "value": "",
              },
              "ref": null,
              "rendered": "Все",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": "v1",
              "nodeType": "host",
              "props": Object {
                "children": "v1",
                "value": "v1",
              },
              "ref": null,
              "rendered": "v1",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": "v2",
              "nodeType": "host",
              "props": Object {
                "children": "v2",
                "value": "v2",
              },
              "ref": null,
              "rendered": "v2",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": "v3",
              "nodeType": "host",
              "props": Object {
                "children": "v3",
                "value": "v3",
              },
              "ref": null,
              "rendered": "v3",
              "type": "option",
            },
          ],
          "type": "select",
        },
        "type": "div",
      },
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
